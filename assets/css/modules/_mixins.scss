%primary-font {
  font-family: "Montserrat", sans-serif;
}

%secondary-font {
  font-family: Arial, sans-serif;
}

%clearfix {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
  zoom: 1;
}

%block-margin {
  margin-top: $small-block-margin;
  margin-bottom: $small-block-margin;

  @include mq($from: small) {
    margin-top: $large-block-margin;
    margin-bottom: $large-block-margin;
  }
}

%position-right-margin {
  margin-left: auto;
  margin-right: auto;

  @include mq($from: small) {
    margin-left: $large-block-margin;
    margin-right: 0;
  }
}

%position-left-margin {
  margin-left: auto;
  margin-right: auto;

  @include mq($from: small) {
    margin-right: $large-block-margin;
    margin-left: 0;
  }
}

@mixin print() {
  html.print {
    @content;
  }
  @media print {
    @content;
  }
}

@mixin endfloat() {
  float: none;
  margin-left: auto;
  margin-right: auto;
}

///
/// Viewport sized typography with minimum and maximum values
///
/// @author Eduardo Boucas (@eduardoboucas)
///
/// @param {Number}   $responsive  - Viewport-based size
/// @param {Number}   $min         - Minimum font size (px)
/// @param {Number}   $max         - Maximum font size (px)
///                                  (optional)
/// @param {Number}   $fallback    - Fallback for viewport-
///                                  based units (optional)
///
/// @example scss - 5vw font size (with 50px fallback),
///                 minumum of 35px and maximum of 150px
///  @include responsive-font(5vw, 35px, 150px, 50px);
///

@mixin responsive-element($element, $min, $max: false, $fallback: false) {
  $responsive: (
      strip-unit($max) / strip-unit($max-width - ($container-padding * 2))
    ) * 100;
  $responsive: $responsive * 1vw;

  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == "vh", "height", "width");
  $min-breakpoint: $min / $responsive-unitless * 100;

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    #{$element}: $min;
  }

  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}) {
      #{$element}: $max;
    }
  }

  @if $fallback {
    #{$element}: $fallback;
  }

  #{$element}: $responsive;
}

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@mixin outer-container($local-max-width: $max-width) {
  //  @include clearfix;
  max-width: $local-max-width;
  margin: {
    left: auto;
    right: auto;
  }
}
